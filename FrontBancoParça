import tkinter as tk
from tkinter import messagebox
from banco_db import BancoDB  

class BancoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Sistema Bancário")
        self.db = BancoDB()

        # Configuração da Interface
        self.create_widgets()

    def create_widgets(self):
        # Widgets para criar conta
        self.label_titular = tk.Label(self.root, text="Titular:")
        self.label_titular.grid(row=0, column=0)
        self.entry_titular = tk.Entry(self.root)
        self.entry_titular.grid(row=0, column=1)

        self.button_criar_conta = tk.Button(self.root, text="Criar Conta", command=self.criar_conta)
        self.button_criar_conta.grid(row=1, column=0, columnspan=2)

        # Widgets para depósito
        self.label_deposito = tk.Label(self.root, text="Titular:")
        self.label_deposito.grid(row=2, column=0)
        self.entry_deposito = tk.Entry(self.root)
        self.entry_deposito.grid(row=2, column=1)

        self.label_valor_deposito = tk.Label(self.root, text="Valor:")
        self.label_valor_deposito.grid(row=3, column=0)
        self.entry_valor_deposito = tk.Entry(self.root)
        self.entry_valor_deposito.grid(row=3, column=1)

        self.button_deposito = tk.Button(self.root, text="Depositar", command=self.depositar)
        self.button_deposito.grid(row=4, column=0, columnspan=2)

        # Widgets para saque
        self.label_saque = tk.Label(self.root, text="Titular:")
        self.label_saque.grid(row=5, column=0)
        self.entry_saque = tk.Entry(self.root)
        self.entry_saque.grid(row=5, column=1)

        self.label_valor_saque = tk.Label(self.root, text="Valor:")
        self.label_valor_saque.grid(row=6, column=0)
        self.entry_valor_saque = tk.Entry(self.root)
        self.entry_valor_saque.grid(row=6, column=1)

        self.button_saque = tk.Button(self.root, text="Sacar", command=self.sacar)
        self.button_saque.grid(row=7, column=0, columnspan=2)

        # Widgets para transferência
        self.label_origem = tk.Label(self.root, text="Titular Origem:")
        self.label_origem.grid(row=8, column=0)
        self.entry_origem = tk.Entry(self.root)
        self.entry_origem.grid(row=8, column=1)

        self.label_destino = tk.Label(self.root, text="Titular Destino:")
        self.label_destino.grid(row=9, column=0)
        self.entry_destino = tk.Entry(self.root)
        self.entry_destino.grid(row=9, column=1)

        self.label_valor_transferencia = tk.Label(self.root, text="Valor:")
        self.label_valor_transferencia.grid(row=10, column=0)
        self.entry_valor_transferencia = tk.Entry(self.root)
        self.entry_valor_transferencia.grid(row=10, column=1)

        self.button_transferencia = tk.Button(self.root, text="Transferir", command=self.transferir)
        self.button_transferencia.grid(row=11, column=0, columnspan=2)

        # Widgets para consulta de saldo
        self.label_consulta_saldo = tk.Label(self.root, text="Titular:")
        self.label_consulta_saldo.grid(row=12, column=0)
        self.entry_consulta_saldo = tk.Entry(self.root)
        self.entry_consulta_saldo.grid(row=12, column=1)

        self.button_consultar_saldo = tk.Button(self.root, text="Consultar Saldo", command=self.consultar_saldo)
        self.button_consultar_saldo.grid(row=13, column=0, columnspan=2)

    def criar_conta(self):
        titular = self.entry_titular.get()
        if self.db.criar_conta(titular):
            messagebox.showinfo("Sucesso", "Conta criada com sucesso!")
        else:
            messagebox.showerror("Erro", "Falha ao criar conta.")

    def depositar(self):
        titular = self.entry_deposito.get()
        valor = float(self.entry_valor_deposito.get())
        if self.db.depositar(titular, valor):
            messagebox.showinfo("Sucesso", "Depósito realizado com sucesso!")
        else:
            messagebox.showerror("Erro", "Falha ao realizar depósito.")

    def sacar(self):
        titular = self.entry_saque.get()
        valor = float(self.entry_valor_saque.get())
        if self.db.sacar(titular, valor):
            messagebox.showinfo("Sucesso", "Saque realizado com sucesso!")
        else:
            messagebox.showerror("Erro", "Falha ao realizar saque ou saldo insuficiente.")

    def transferir(self):
        titular_origem = self.entry_origem.get()
        titular_destino = self.entry_destino.get()
        valor = float(self.entry_valor_transferencia.get())
        if self.db.transferir(titular_origem, titular_destino, valor):
            messagebox.showinfo("Sucesso", "Transferência realizada com sucesso!")
        else:
            messagebox.showerror("Erro", "Falha ao realizar transferência ou saldo insuficiente.")

    def consultar_saldo(self):
        titular = self.entry_consulta_saldo.get()
        saldo = self.db.consultar_saldo(titular)
        if saldo is not None:
            messagebox.showinfo("Saldo", f"Saldo disponível: {saldo:.2f}")
        else:
            messagebox.showerror("Erro", "Titular não encontrado.")

    def fechar_conexao(self):
        self.db.fechar_conexao()

if __name__ == "__main__":
    root = tk.Tk()
    app = BancoApp(root)
    root.protocol("WM_DELETE_WINDOW", app.fechar_conexao)
    root.mainloop()
